#+TITLE: Equal Rights for Functional Objects
#+AUTHOR: Henry Baker
#+EMAIL: Philip Potter - @philandstuff
#+OPTIONS: reveal_mathjax:t reveal_history:t num:nil
#+REVEAL_HLEVEL:1
#+REVEAL_MIN_SCALE:1.2
#+REVEAL_MAX_SCALE:1.2
#+REVEAL_ROOT:.
#+REVEAL_TRANS:linear
#+REVEAL_THEME:simple

* introduction

#+ATTR_REVEAL: :frag t
  The Joy of Clojure, Michael Fogus and Chris Houser

#+ATTR_REVEAL: :frag t
  /And if two objects aren't equal forever, then they're technically
  never equal (Baker 1993)./

* problem: many types of equality

#+ATTR_HTML: :class reveal
| C++       | pointer equality, overloaded ~==~ operator            |
| Lisp      | ~EQ~, ~EQL~, ~EQUAL~, ~EQUALP~, ~STRING=~, ~CHAR=~... |
| Smalltalk | ~=~, ~==~                                             |
| Java      | ~==~, ~.equals()~                                     |
| Perl      | ~==~, ~eq~                                            |
| Python    | ~==~, ~is~                                            |
| Ruby      | ~==~, ~eql?~, ~equal?~                                |

** oops

#+BEGIN_SRC python :exports both :session
  # Python
  x = 1
  y = 1
  x is y
#+END_SRC

#+RESULTS:
: True

#+BEGIN_SRC python :exports both :session
  x = 500
  y = 500
  x is y
#+END_SRC

#+RESULTS:
: False

** oops

#+BEGIN_SRC java
  public class Foo {
      public static void main(String[] args) {
          if (Integer.valueOf(200) == Integer.valueOf(200)) {
              System.out.println("Hooray!");
          } else {
              System.out.println("Oh noes!");
          }
      }
  }
#+END_SRC

#+BEGIN_EXAMPLE
Oh noes!
#+END_EXAMPLE

** lists

   if x = ~[1,2,3]~, and y = ~[1,2,3]~:

   are they equal?

   are they the same?

#+ATTR_REVEAL: :frag t
   can we answer this without resorting to "it depends"?

** in java.util.List terms...

   - ~==~ is sometimes too fine
   - ~.equals()~ is sometimes too coarse


* object identity

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC ruby
  sugababes = Set.new [:mutya, :keisha, :siobhan]
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC ruby
  sugababes.delete(:siobhan); sugababes.add(:heidi) # 2001
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC ruby
  sugababes.delete(:mutya); sugababes.add(:amelle) # 2005
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC ruby
  sugababes.delete(:keisha); sugababes.add(:jade) # 2009
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC ruby
  new_band = Set.new [:mutya, :keisha, :siobhan] # 2011
#+END_SRC

* what do we really want from equality?

** ONE equality operator!

** equivalence relation

reflexive:

$$ a \equiv a $$

symmetric:

$$ a \equiv b \implies b \equiv a $$

transitive:

$$ a \equiv b \land b \equiv c \implies a \equiv c $$

Partitions the universe into /equivalence classes/

#+REVEAL: split

$x \equiv y \implies f(x) \equiv f(y)$

for arbitrary $f$

** not too fine, not too coarse

* solution: egal

  Key idea is that of object identity:

  Objects which /behave/ the same should /be/ the same.

#+ATTR_REVEAL: :frag t
  Related to "identity of indiscernibles"

** numbers

   500 = 500

** immutable lists

   [1,2,3] = [1,2,3]

#+ATTR_REVEAL: :frag t
   [a,b,c] = [a,b,c]

#+ATTR_REVEAL: :frag t
   more generally, iterate over elements and recursively call egal

** mutable lists

   [1,2,3] = [1,2,3]?

** mutable lists

compare ~eq-cons~ on p3 of the paper

#+BEGIN_SRC ruby :exports both :results output
  def same?(x,y)
    saved_head = x[0]
    x[0] = "My super-sekrit value"
    x[0] == y[0]
  ensure
    x[0] = saved_head
  end

  x = ["a"]; y = ["a"]

  puts "x=x: #{same?(x,x)}"
  puts "x=y: #{same?(x,y)}"
#+END_SRC

#+RESULTS:
: x=x: true
: x=y: false

** in summary:

   compare simple values by value

   compare *mutable* objects by reference

   compare *immutable* objects by recursively comparing their components

* implications
** immutability matters

#+BEGIN_NOTES
immutable views on mutable objects don't cut it
#+END_NOTES

** mutable lists & sets are rubbish

** mutable objects should store a single value

#+BEGIN_NOTES

It's too valuable to be able to compare lists and maps by value, that
you want to use immutable values all the time.  Rather than using a
mutable list, use a mutable cell containing an immutable list.

#+END_NOTES

** distributed systems

* questions for discussion
** reference equality isn't perfect for mutable objects

#+BEGIN_NOTES
conflict: can't have reference equality and the ability to simulate other objects
#+END_NOTES

** laziness

#+BEGIN_SRC clojure
  ;; clojure
  (= (iterate inc 1) (iterate inc 1))
#+END_SRC

#+BEGIN_SRC haskell
  -- haskell
  cycle [1] == cycle [1]
#+END_SRC

** what about functions?

   functions are values too.  can we compare functions?  should we?

** abstract data types & user-defined equality
** internally mutable fields

   for example: cached hashcode field as a performance optimization

** closures and data defined using them
*** applies equally to anonymous inner classes

* fin
